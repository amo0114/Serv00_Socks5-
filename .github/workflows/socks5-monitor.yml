name: SOCKS5 Monitor

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Check and restart SOCKS5
        id: check_restart_socks5
        run: |
          # 定义 SOCKS5 连接信息
          SOCKS5_PROXY="moyuan:qwer0115@31.186.85.171:57061"
          
          # 检查 SOCKS5 程序是否正在运行
          STATUS=$(sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.VPS_IP }} "pgrep -x 's5'")
          if [ -n "$STATUS" ]; then
            echo "SOCKS5 程序正在运行。"
            STATUS_MESSAGE="正常运行"
            RESTART_MESSAGE=""
            RUNNING_PIDS=$STATUS
          else
            echo "SOCKS5 程序未运行，正在重新启动..."
            STATUS_MESSAGE="未运行，已尝试重启"
            # 使用 SSH 连接到 VPS 并重启 SOCKS5 程序
            sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.VPS_IP }} "
              # 启动 SOCKS5 程序的命令
              nohup ${FILE_PATH}/s5 -c ${FILE_PATH}/config.json >/dev/null 2>&1 &
              sleep 2
            "
            # 检查 SOCKS5 是否成功重启
            NEW_STATUS=$(sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.VPS_IP }} "pgrep -x 's5'")
            if [ -n "$NEW_STATUS" ]; then
              echo "SOCKS5 程序已成功重启。"
              RESTART_MESSAGE="SOCKS5 程序已成功重启。"
              RUNNING_PIDS=$NEW_STATUS
            else
              echo "SOCKS5 程序重启失败。"
              RESTART_MESSAGE="SOCKS5 程序重启失败。"
              RUNNING_PIDS="无"
            fi
          fi

          echo "::set-output name=status_message::$STATUS_MESSAGE"
          echo "::set-output name=restart_message::$RESTART_MESSAGE"
          echo "::set-output name=running_pids::$RUNNING_PIDS"

      - name: Debug variables before sending Telegram message
        run: |
          echo "STATUS_MESSAGE=${{ steps.check_restart_socks5.outputs.status_message }}"
          echo "RESTART_MESSAGE=${{ steps.check_restart_socks5.outputs.restart_message }}"
          echo "RUNNING_PIDS=${{ steps.check_restart_socks5.outputs.running_pids }}"

      - name: Send notification to Telegram
        run: |
          # 发送通知到 Telegram
          MESSAGE="SOCKS5 程序检查完成。状态：${{ steps.check_restart_socks5.outputs.status_message }}。${{ steps.check_restart_socks5.outputs.restart_message }} 当前进程 ID：${{ steps.check_restart_socks5.outputs.running_pids }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.CHAT_ID }}&text=${MESSAGE}"
