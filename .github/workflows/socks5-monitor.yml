name: SOCKS5 Monitor

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Check and restart SOCKS5
        id: check_restart_socks5
        continue-on-error: true
        run: |
          # 定义 SOCKS5 连接信息
          SOCKS5_PROXY="moyuan:qwer0115@31.186.85.171:57061"
          VPS_IPS=("s8.serv00.com" "web8.serv00.com" "cache8.serv00.com")
          CONNECTED=false

          for VPS_IP in "${VPS_IPS[@]}"; do
            echo "尝试连接到 ${VPS_IP}..."
            STATUS=$(sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SSH_USERNAME }}@$VPS_IP "pgrep -x 's5'" 2>/dev/null) || true
            
            if [ $? -eq 0 ]; then
              CONNECTED=true
              echo "连接成功。"
              # 检查 SOCKS5 是否正在运行
              if [ -n "$STATUS" ]; then
                echo "SOCKS5 程序正在运行。"
                STATUS_MESSAGE="正常运行"
                RESTART_MESSAGE=""
                RUNNING_PIDS=$STATUS
              else
                echo "SOCKS5 程序未运行，正在重新启动..."
                STATUS_MESSAGE="未运行，已尝试重启"
                # 使用 SSH 连接到 VPS 并重启 SOCKS5 程序
                sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@$VPS_IP "
                  nohup ${FILE_PATH}/s5 -c ${FILE_PATH}/config.json >/dev/null 2>&1 &
                  sleep 2
                " || true
                # 检查 SOCKS5 是否成功重启
                NEW_STATUS=$(sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@$VPS_IP "pgrep -x 's5'" 2>/dev/null) || true
                if [ -n "$NEW_STATUS" ]; then
                  echo "SOCKS5 程序已成功重启。"
                  RESTART_MESSAGE="SOCKS5 程序已成功重启。"
                  RUNNING_PIDS=$NEW_STATUS
                else
                  echo "SOCKS5 程序重启失败。"
                  RESTART_MESSAGE="SOCKS5 程序重启失败。"
                  RUNNING_PIDS="无"
                fi
              fi
              break
            else
              echo "无法连接到 ${VPS_IP}。"
            fi
          done

          if [ "$CONNECTED" = false ]; then
            echo "无法连接到任何 VPS。"
            STATUS_MESSAGE="无法连接到任何 VPS"
            RESTART_MESSAGE=""
            RUNNING_PIDS="无"
          fi

          # 将变量写入 GitHub 环境文件
          echo "status_message=$STATUS_MESSAGE" >> $GITHUB_ENV
          echo "restart_message=$RESTART_MESSAGE" >> $GITHUB_ENV
          echo "running_pids=$RUNNING_PIDS" >> $GITHUB_ENV

      - name: Debug variables before sending Telegram message
        run: |
          echo "STATUS_MESSAGE=${{ env.status_message }}"
          echo "RESTART_MESSAGE=${{ env.restart_message }}"
          echo "RUNNING_PIDS=${{ env.running_pids }}"

      - name: Send notification to Telegram
        run: |
          # 发送通知到 Telegram
          MESSAGE="SOCKS5 程序检查完成。状态：${{ env.status_message }}。${{ env.restart_message }} 当前进程 ID：${{ env.running_pids }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.CHAT_ID }}&text=${MESSAGE}"
